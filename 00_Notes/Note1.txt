1. Var:- Not to use var because of issue in block scope and functional scope.
2. let accountState; :- It gives undefined by default.
3. "use strict";  :- treat all the code of js as newer version
4. type of undefined = undefined
5. type of null = object

6. //conversion of __ into number (type always number but value changes)
  
  if null =>  value is 0
  if string like "33abc", "dhruv" => value is NaN
  if undefined => value is NaN
  if true => 1 and false => 0

7. // conversion of __ into bool  (type remains boolean but value changes)

   if 1 => value is true (similarly of false => 0)
   if "" => value is false
   if "dhruv" => value is true

8. The equality check == and comparison > < >= <= work different,  
   hence comaprision convert null to number , treating it as 0
   that why null>=0 is true and null == 0 is false

9. === strict equality , also check the dataType "2"===2 (false)

10. 2 types of dataTypeS :- 
     
    1. Primitive(send copy of variable) => 7 types :- String,boolean,number,symbol,null,undefined,bigInt

    2. Non-Primitive(Reference) => Array, functions, objects
                
11. Memory 2 types:- (Fig1_Memory)
  
    1.Stack(Primitive)
    2.Heap(Non-Primitive)   
  
12. Use new method called The string interpolation. `${}`
    It is a great feature. It helps in inserting values into string literals. It makes code more readable and avoids clumsiness.

13. //2nd way to initialize the string 
         
         const gameName= new String("dhruv");
         gameName

    It gives object.

14.console.log(balance.toFixed(2)); //precision value

15. Generate random value between a range => 
     
    const min =10
    const max = 20

    console.log(Math.floor(Math.random()*(max-min+1))+min);

********************ARRAYS START *****************************

16. Arrays in js always create Shallow Copies. 
    
   Shallow Copies of the object is a copy whose properties share the same references as those of the source object from which the copy was made.

17. Deep copy of the object is a copy whose properties do not share the same references as those of the source object from which the copy was made.

18. Slice and Splice Differece
In slice it gives the defined range value 


But in Splice the  ranged array is cut from array.

A [0,1,2,3,4,5]
slice(1,3)
answer=> [1,2]

B [0,1,2,3,4,5]
splice(1,3)

answer => B [0,4,5]
          [1,2,3]


19. Some operations are :- join,shift,unshift,push,concat,spreadOut,flat,from,of


*****************************ARRAYS END*****************************************


*****************************OBJECTS START***************************************

20.  We can declare objects in 2 ways:-
     
     1. Literals :- In this there is no formation of singleton.
     2. Constructor :- In this there is formation of singleton.



